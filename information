/*vim 命令*/
ctrl + w //分屏时切换到下一个屏
compiler commond
g++ name.cpp -o name

g++ name.cpp -o name -std=c++11
//use C++11 compiler

g++ name.cpp -o name -lpthread
//编译时使用链接线程库
g++ name.cpp -o name -D_REENTRANT -lpthread
//使用-D_REENTRANT会在编译时使用的是线程安全的函数。
./name
/*多文件编译*/
gcc name01.c name02.c -o name//name02.c被name01.c调用，或者相反
cat /proc/sys/kernel/osrelease
//show linux version

vim -r name
//恢复.swp文件
rm -rf dir

/*将文件推送到github仓库*/
git add filename//将文件添加到暂存区
git commit -m "info"//提交本次修改
git push origin master//推送到远程仓库的master分支

/*git从github拉取分支更新本地代码*/
git fetch origin master:temp//拉取远程的master分支，作为本地temp分支
git merge temp//temp与本地分支合并
git branch -d temp//删除暂存的temp分支

/*git用远程分支覆盖本地分支*/
git fetch --all
git reset --hard origin/master
git pull

git rm fiel(删除文件)
git rm -r aaa(删除文件夹)
%lx %x %lX %X 输出32位，64位的数的十六进制形式。

INADDR_NONE 的值是0xFFFFFFFF表示无效的IP地址。调用inet_addr，失败时返回这个值
可以通过这里判断传入的是否为一个IP

C 语言里面没有重载，函数重载等等都没有。
// /* 向后搜索; ?*向前搜索
atoi();//把一个字符串转换为整数，遇到abc这种错误格式会返回0，遇到12.4这种小数会返回12
bzero(void *s,int n);//把前n个字节置位0，现在用memset()代替
strncasecmp(void *s1,void *s2,int n);
strcasecmp(void *s1,void *s2);//忽略大小写比较
strcmp(void *s1,void *s2);
strncmp(void *s1,void *s2,int n);

size_t strcspn(const char *s,const char *reject);
从s开始，计算不在reject内的字符个数,遇到reject所含有的字符便停止.
char* strstr(char *s1,char *s2);//返回匹配串的首个地址

一个进程的内存空间：数据区(全局区域)，堆区域，栈区域。
全局变量，静态变量，const常量存放在全局区。
函数运行使用栈
new，malloc等函数动态分配提供堆空间
临界区:函数内同时运行多个线程时，引发问题的多条语句构成的代码块。
不是某个区域，而是一个代码块

int dup(int oldfd);
调用dup函数时，内核在进程中创建一个新的文件描述符，此文件描述符是当前可用文件描述符的最小数值,这个文件描述符指向oldfd的文件
char *strtok(char s[],const char*delim);
//分割字符串作用，不过会破坏原有的字符串，把对应的delim变为\0,首次调用s设置为要分解的字符串，以后把s设置为NULL。
/*TCP与UDP*/
1.TCP有流控制，UDP无流控制这是最大的区别
2.TCP数据传输中不存在边界,可以对多次的传输一次接收.UDP的传输存在传输边界,IO次数很重要

char str[] = "hello," "This word"
对于多个""引用,在C语言里面会合并成一个字符串处理

static修饰的函数和普通函数
static修饰的函数只能在本文件中使用，不能被其他文件所调用，普通的函数，默认是extern的，可以被其他文件所调用。
静态函数优点:
    1.在其他文件中可以定义相同名称的函数，不会发生冲突.
    2.保证该函数只能在该文件下使用

#include<getopt.h>
extern char *optarg;
extern int optind,opterr,optopt;
getopt_long(int argc,char* const argv[],const char* optstring,const struct option* longopts,int* longindex);

optstring:短字符选项
longopts:长字符选项
longindex:如果非空，它指向的变量将记录当前参数符合longopts里面的位置，即longopts的下标
struct option{
    const char *name;
    int has_arg;
    int *flag;
    int val;
}
/*当参数flag == NULL时，返回val的值.否则*flag = val,返回0*/
has_arg的参数有
no_argument:表明长选项不带参数，如--help,--version
required_argument:表明长选项必须带参数,如--time 30,--port 8080
optional_argument:表明长选项的参数是可选的,如--clients 100,--clients

/*全局变量的意义*/
optarg:指向当前选项参数的指针,如果当前选项没有参数，指向NULL
optind:调用getopt()时下一个argv指针的索引
optopt:最后一个未知选项
opterr:如果不希望getopt()打印报错信息，只需要把opterr = 0;

/*volatile关键字*/
易变的，相当于告知编译器这是一个容易改变的变量，不要对它进行优化，每次都要到变量的地址去读取变量的数据，这个数据是保存在内存中，不要把他装入寄存器.
例如:
    int a = 1;
    a = 2;
    a = 3;
这种代码对编译器而言，会认为是a = 3,把a存在一个寄存器中，每次遇到a都在这个寄存器中读取，但a可能是该百年的，在中断，或者多进程。

/*僵尸进程*/
向exit()函数传递参数和main()函数的返回值都会传递给操作系统。然而操作系统不会销毁子进程，直到把这些值传递给产生该子进程的父进程。处于这种状态下的进程就是僵尸进程。
/*一个僵尸进程产成的示例:zombie.c*/
int main(int argc,char *argv[]){
    pid_t pid = fork();
    if(pid == 0){
        fprintf(stdout,"child process.\n");
    }
    else{
        fprintf(stdout,"child process ID:%d\n",pid);
        sleep(20);
    }
    if(pid == 0){
        fprintf(stdout,"End child process\n");
    }
    else{
        fprintf(stdout,"End parent process.\n");
    }
    return 0;
}
子进程结束后，父进程仍在执行sleep,这时子进程就变为僵尸进程。

/*进程相关*/
ps au//查看进程列表
STAT 进程状态
D 无法中断的休眠状态(一般为IO进程)
R 正在运行
S 休眠状态
T 停止或被追踪
W 进入内存交换(内核2.6以后无效)
X 死掉的进程
Z 僵尸进程
/*销毁僵尸进程*/
父进程主动获取子进程的结束状态值,这样便可以销毁子进程.
1.利用wait()函数
#include<sys/wait.h>
pid_t wait(int *statloc);
调用该函数时，会阻塞进程,如果已经有子进程终止，那么子进程终止时传递的返回值将保存到statloc所指向的内存空间,但该空间还保存有其他信息,需要利用宏来分离.
WIFEXITED();//子进程正常终止时返回真.
WEXITSTATUS();//返回子进程的返回值.
/*调用示例*/
int status;
.......
wait(&status);
if(WIFEXITED(status))
    fprintf(stdout,"Child send:%d\n",WEXITSTATUS(status));
2.利用waitpid()函数
#include<sys/wait.h>
pid_t waitpid(pid_t pid,int *statloc,int options);

pid:等待终止的的目标子进程ID,若传递-1,则与wait函数相同,等待任意进程的终止.
statloc:保存返回信息的空间指针
options: 有以下几个选项
    (1) WNOHANG：若制定的pid未终止，则返回0，不会阻塞进程.

/*信号处理*/
#include<signal.h>
void (*signal(int signo,void (*func)(int)))(int);
signo:特殊情况的信息，有如下:
    SIGALRM:已到通过调用alarm函数注册的时间
    SIGINT:输入CTRL+C.
    SIGCHLD:子进程终止.
func:发生特殊情况时,调用的函数的指针.
/*alarm函数*/
#include<unistd.h>
unsigned int alarm(unsigned int sec);
相应sec时间后，将产生一个SIGALRM信号.

/*signaction*/

/*IO函数*/
read()和write()
读取常规文件时，不会阻塞进程，不管读取多少资金，read会在有限时间返回，从终端设备和网络设备中，不一定。如果网络没有接受到数据包，read就会阻塞。

/*断开套接字连接*/
#include<sys/socket.h>
int shutdown(int sock,int howto);
sock:需要断开套接字的文件描述符.
howto:断开方式
    SHUT_RD:0 断开输入流
    SHUT_WR:1 断开输出流
    SHUT_RDWR:2 同时断开IO流
/*webbench为什么使用进程，而不是线程?*/
默认情况下：主线程+辅助线程 <= 256.
而进程的最大数目则和操作系统本身相关.

/*perror()错误输出函数*/
例如perror("fun"),其输出为：fun：后面跟着错误信息(加一个换行符)。包含头文件stdio.h.
/*setvbuf函数*/
int setvbuf(FILE *stream,char *buf,int type,unsigned size);
stream:指向流的指针
buf:期望缓冲区的地址
type:期望缓冲区的类型
    _IOFBF(满缓存):缓冲区为空时，从流中读入。缓冲区为满时，写出.
    _IOLBF(行缓存):每次从流中读入一行或向流写一行.
    _IONBF(无缓存):没有缓存区.
size:缓存区字节数.

/*多线程问题*/
pthread_create创建线程成功，但线程却没有执行?
因为线程的创建会延后一些，并不是立即就被创建好，所以如果这时主线程被立即执行完，那么子线程就不会执行了。所以可以用sleep()阻塞main线程一段时间，当然最佳的方法是李应用pthread_join()等待子线程结束后再结束掉主线程
